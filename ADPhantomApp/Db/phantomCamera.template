
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, ADDR, Addr
#% macro, TIMEOUT, TIMEOUT

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, phantomTop.edl, P=$(P),R=$(R)

include "ADBase.template"

record(calcout, "$(P)$(R)AcqNotify")
{
  field(INPA, "$(P)$(R)Acquire")
  field(INPB, "$(P)$(R)AcqNotify")
  field(CALC, "A=1?(B=1?0:1):0")
  field(SCAN,  "1 second")
}

################################################################
###
### Partition and Cine Count
###

record(longout, "$(P)$(R)PartitionCines")
{
  field(DESC, "Partition the memory")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SET_PARTITION")
}

record(longin, "$(P)$(R)CineCount_RBV")
{
  field(DESC, "Number of available cines")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_GET_CINE_COUNT")
  field(SCAN, "I/O Intr")
}

################################################################
###
### Post Trigger Frame Count
###
record(longin, "$(P)$(R)MaxFrameCount_RBV")
{
  field(DESC, "Maximum number of frames per cine")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_MAX_FRAME_COUNT")
  field(SCAN, "I/O Intr")
}

################################################################
###
### Post Trigger Frame Count
###
record(longout, "$(P)$(R)PostTrigFrames")
{
  field(DESC, "Set the post trigger frame count")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_POST_TRIG_COUNT")
}

record(longin, "$(P)$(R)PostTrigFrames_RBV")
{
  field(DESC, "Number of post trigger frames")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_POST_TRIG_COUNT")
  field(SCAN, "I/O Intr")
}


################################################################
###
### Total Frame Count
###
record(longin, "$(P)$(R)TotalFrameCount_RBV")
{
  field(DESC, "Total number of frames recorded")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_TOTAL_FRAME_COUNT")
  field(SCAN, "I/O Intr")
}

################################################################
###
### Automatically move to next available cine after capturing
###

record(bo, "$(P)$(R)AutoAdvance")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_ADVANCE")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(VAL, "1")
   field(PINI, "YES")
}

record(bi, "$(P)$(R)AutoAdvance_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_ADVANCE")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

################################################################
###
### Auto Saving cine
###

record(bo, "$(P)$(R)AutoSave")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_SAVE")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)$(R)AutoSave_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_SAVE")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoRestart")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_RESTART")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)$(R)AutoRestart_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_RESTART")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoBref")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_CSR")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)$(R)AutoBref_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTO_CSR")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

################################################################
###
### Cine Data
###

### Set Cine Name
record(waveform, "$(P)$(R)CineName")
{
  field(DESC, "Set Cine name")
  field(DTYP, "asynOctetWrite")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_NAME")
  field(FTVL, "CHAR")
  field(NELM, "256")
}

### Get Cine Name
record(waveform, "$(P)$(R)CineName_RBV")
{
  field(DESC, "Get Cine name prefix")
  field(DTYP, "asynOctetRead")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_NAME")
  field(FTVL, "CHAR")
  field(NELM, "256")
  field(SCAN, "I/O Intr")
}


### Selected Cine ID

record(longout, "$(P)$(R)SelectedCine")
{
  field(DESC, "Select a Cine file")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_SELECTED")
  field(DRVL, "1")
  field(DRVH, "63")
}

record(longin, "$(P)$(R)SelectedCine_RBV")
{
  field(DESC, "Selected Cine file ID")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_SELECTED")
  field(SCAN, "I/O Intr")
}

### Cine frame count

record(longin, "$(P)$(R)CineFrameCount_RBV")
{
  field(DESC, "Selected Cine frame count")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_FR_COUNT")
  field(SCAN, "I/O Intr")
}

### Cine first frame

record(longin, "$(P)$(R)CineFirstFrame_RBV")
{
  field(DESC, "Selected Cine first frame")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_FIRST_FR")
  field(SCAN, "I/O Intr")
}

### Cine last frame

record(longin, "$(P)$(R)CineLastFrame_RBV")
{
  field(DESC, "Selected Cine last frame")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_LAST_FR")
  field(SCAN, "I/O Intr")
}

### Download start frame

record(longout, "$(P)$(R)DownloadStartFrame")
{
  field(DESC, "Download starting frame")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_START_FRAME")
}

record(longin, "$(P)$(R)DownloadStartFrame_RBV")
{
  field(DESC, "Download starting frame")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_START_FRAME")
  field(SCAN, "I/O Intr")
}

### Download end frame

record(longout, "$(P)$(R)DownloadEndFrame")
{
  field(DESC, "Download ending frame")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_END_FRAME")
}

record(longin, "$(P)$(R)DownloadEndFrame_RBV")
{
  field(DESC, "Download ending frame")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_END_FRAME")
  field(SCAN, "I/O Intr")
}

### Download start cine

record(longout, "$(P)$(R)DownloadStartCine")
{
  field(DESC, "Download starting cine")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_START_CINE")
  field(VAL, "1")
  field(PINI, "YES")
  field(DRVL, "1")
  field(DRVH, "63")
}

record(longin, "$(P)$(R)DownloadStartCine_RBV")
{
  field(DESC, "Download starting cine")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_START_CINE")
  field(SCAN, "I/O Intr")
}

### Download end cine

record(longout, "$(P)$(R)DownloadEndCine")
{
  field(DESC, "Download ending cine")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_END_CINE")
  field(VAL, "1")
  field(PINI, "YES")
  field(DRVL, "1")
  field(DRVH, "63")
}

record(longin, "$(P)$(R)DownloadEndCine_RBV")
{
  field(DESC, "Download ending cine")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_END_CINE")
  field(SCAN, "I/O Intr")
}

### Download frame mode 
# Determines whether start and end frames apply to all cines downloaded or only the first and last

record(bo, "$(P)$(R)DownloadFrameMode")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_FRAME_MODE")
  field(ZNAM, "First and Last")
  field(ONAM, "Universal")
  field(VAL, "1")
  field(PINI, "YES")
}

record(bi, "$(P)$(R)DownloadFrameMode_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_FRAME_MODE")
  field(ZNAM, "First and Last")
  field(ONAM, "Universal")
  field(SCAN, "I/O Intr")
}

### Cine download command

record(longout, "$(P)$(R)Download")
{
  field(DESC, "Start the download")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD")
}

### Cine abort download command

record(longout, "$(P)$(R)AbortDownload")
{
  field(DESC, "Abort the download")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_ABORT")
}

### Cine save to flash command

record(longout, "$(P)$(R)SaveToCF")
{
  field(DESC, "Save selected cine to CF")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CINE_SAVE_CF")
}

record(longin, "$(P)$(R)DownloadCount_RBV") {
  field(DTYP, "asynInt32")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_DOWNLOAD_COUNT")
}

record(longin, "$(P)$(R)StateRaw") {
  field(DTYP, "asynInt32")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_ACQUIRE_STATE")
  field(FLNK, "$(P)$(R)State_RBV")
}

record(mbbiDirect, "$(P)$(R)State_RBV") {
  field(INP, "$(P)$(R)StateRaw")
}

################################################################
###
### Send a software trigger
###
record(longout, "$(P)$(R)SendSoftwareTrigger")
{
  field(DESC, "Send a software trigger")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SOFTWARE_TRIGGER")
}

################################################################
###
### Perform a CSR black reference
###
record(longout, "$(P)$(R)PerformCSR")
{
  field(DESC, "Perform a CSR")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_PERFORM_CSR")
}

record(longin, "$(P)$(R)CSRCount_RBV")
{
  field(DESC, "Bref counter")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CSR_COUNT")
  field(SCAN, "I/O Intr")
}

################################################################
###
### User settings
###
record(longout, "$(P)$(R)SettingsSave")
{
  field(DESC, "Save User Settings")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SETTINGS_SAVE")
}

record(longout, "$(P)$(R)SettingsLoad")
{
  field(DESC, "Load User Settings")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SETTINGS_LOAD")
}

record(mbbo, "$(P)$(R)SettingsSlot")
{
  field(DESC, "Settings slot")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SETTINGS_SLOT")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
}

record(mbbi, "$(P)$(R)SettingsSlot_RBV")
{
  field(DESC, "Settings slot")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SETTINGS_SLOT")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(SCAN, "I/O Intr")
}

################################################################
###
### Live Cine Preview
###
### Start/Stop preview

record(longout, "$(P)$(R)Preview")
{
  field(DESC, "Run the live preview")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_LIVE_PREVIEW")
}

record(longin, "$(P)$(R)Preview_RBV")
{
  field(DESC, "Status of live preview")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_LIVE_PREVIEW")
  field(SCAN, "I/O Intr")
}


################################################################
###
### Camera Status
###

record(longin, "$(P)$(R)SensorTemp_RBV")
{
  field(DESC, "Sensor Temperature")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SENSOR_TEMP")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)ThermoPower_RBV")
{
  field(DESC, "Thermo power %")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_THERMO_POWER")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)CameraTemp_RBV")
{
  field(DESC, "Camera Temperature")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CAMERA_TEMP")
  field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)FanPower_RBV")
{
  field(DESC, "Fan Power %")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_FAN_POWER")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)ExtSyncType")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_EXT_SYNC")
   field(ZRST, "FREE-RUN")
   field(ZRVL, "0")
   field(ONST, "FSYNC")
   field(ONVL, "1")
   field(TWST, "IRIG")
   field(TWVL, "2")
   field(THST, "VIDEO")
   field(THVL, "3")
}

record(mbbi, "$(P)$(R)ExtSyncType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_EXT_SYNC")
   field(ZRST, "FREE-RUN")
   field(ZRVL, "0")
   field(ONST, "FSYNC")
   field(ONVL, "1")
   field(TWST, "IRIG")
   field(TWVL, "2")
   field(THST, "VIDEO")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)EDR")
{
  field(DESC, "Extended Dynamic Range in ns")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_EDR")
}

record(longin, "$(P)$(R)EDR_RBV")
{
  field(DESC, "Extended Dynamic Range in ns")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_EDR")
  field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)FrameDelay")
{
  field(DESC, "Frame Delay in us")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_FRAME_DELAY")
}

record(longin, "$(P)$(R)FrameDelay_RBV")
{
  field(DESC, "Frame Delay in us")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_FRAME_DELAY")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)TriggerEdge")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_TRIGGER_EDGE")
   field(ZRST, "FALLING")
   field(ZRVL, "0")
   field(ONST, "RISING")
   field(ONVL, "1")
}

record(mbbi, "$(P)$(R)TriggerEdge_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_TRIGGER_EDGE")
   field(ZRST, "FALLING")
   field(ZRVL, "0")
   field(ONST, "RISING")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)TriggerFilter")
{
  field(DESC, "Trigger filter in us")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_TRIGGER_FILTER")
}

record(longin, "$(P)$(R)TriggerFilter_RBV")
{
  field(DESC, "Trigger filter in us")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_TRIGGER_FILTER")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)ReadySignal")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_READY_SIGNAL")
   field(ZRST, "RECORDING")
   field(ZRVL, "0")
   field(ONST, "TRIGGER")
   field(ONVL, "1")
}

record(mbbi, "$(P)$(R)ReadySignal_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_READY_SIGNAL")
   field(ZRST, "RECORDING")
   field(ZRVL, "0")
   field(ONST, "TRIGGER")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)Aux1PinMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX1_PIN")
   field(ZRST, "FSYNCIO")
   field(ZRVL, "0")
   field(ONST, "STROBE")
   field(ONVL, "1")
   field(TWST, "EVENT")
   field(TWVL, "2")
   field(THST, "MEMGATE")
   field(THVL, "3")
   field(FRST, "READY")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
}

record(mbbi, "$(P)$(R)Aux1PinMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX1_PIN")
   field(ZRST, "FSYNCIO")
   field(ZRVL, "0")
   field(ONST, "STROBE")
   field(ONVL, "1")
   field(TWST, "EVENT")
   field(TWVL, "2")
   field(THST, "MEMGATE")
   field(THVL, "3")
   field(FRST, "READY")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
   field(TVST, "CEVENT")
   field(TVVL, "12")
   field(TTST, "CMEMGATE")
   field(TTVL, "13")
   field(FTST, "CFSYNC")
   field(FTVL, "14")
   field(FFST, "CPRETRIG")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)Aux2PinMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX2_PIN")
   field(ZRST, "READY")
   field(ZRVL, "0")
   field(ONST, "STROBE")
   field(ONVL, "1")
   field(TWST, "EVENT")
   field(TWVL, "2")
   field(THST, "MEMGATE")
   field(THVL, "3")
   field(FRST, "FSYNCIO")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
}

record(mbbi, "$(P)$(R)Aux2PinMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX2_PIN")
   field(ZRST, "READY")
   field(ZRVL, "0")
   field(ONST, "STROBE")
   field(ONVL, "1")
   field(TWST, "EVENT")
   field(TWVL, "2")
   field(THST, "MEMGATE")
   field(THVL, "3")
   field(FRST, "FSYNCIO")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
   field(TVST, "CEVENT")
   field(TVVL, "12")
   field(TTST, "CMEMGATE")
   field(TTVL, "13")
   field(FTST, "CFSYNC")
   field(FTVL, "14")
   field(FFST, "CPRETRIG")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)Aux4PinMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX4_PIN")
   field(ZRST, "STROBE")
   field(ZRVL, "0")
   field(ONST, "EVENT")
   field(ONVL, "1")
   field(TWST, "MEMGATE")
   field(TWVL, "2")
   field(THST, "FSYNCIO")
   field(THVL, "3")
   field(FRST, "READY")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
}

record(mbbi, "$(P)$(R)Aux4PinMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUX4_PIN")
   field(ZRST, "STROBE")
   field(ZRVL, "0")
   field(ONST, "EVENT")
   field(ONVL, "1")
   field(TWST, "MEMGATE")
   field(TWVL, "2")
   field(THST, "FSYNCIO")
   field(THVL, "3")
   field(FRST, "READY")
   field(FRVL, "4")
   field(FVST, "TCOUT")
   field(FVVL, "5")
   field(SXST, "PRETRIG")
   field(SXVL, "6")
   field(SVST, "AUXTRIG")
   field(SVVL, "7")
   field(EIST, "MSTROBE")
   field(EIVL, "8")
   field(NIST, "AUTOTRIG")
   field(NIVL, "9")
   field(TEST, "SWTRIG")
   field(TEVL, "10")
   field(ELST, "RECORDING")
   field(ELVL, "11")
   field(TVST, "CEVENT")
   field(TVVL, "12")
   field(TTST, "CMEMGATE")
   field(TTVL, "13")
   field(FTST, "CFSYNC")
   field(FTVL, "14")
   field(FFST, "CPRETRIG")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)QuietFan")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_FAN_QUIET")
   field(ZNAM, "Fan On")
   field(ONAM, "Fan Quiet")
}

record(bi, "$(P)$(R)QuietFan_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_FAN_QUIET")
   field(ZNAM, "Fan On")
   field(ONAM, "Fan Quiet")
   field(SCAN, "I/O Intr")
}


record(longout, "$(P)$(R)SyncClock")
{
  field(DESC,  "Sync Phantom Clock with server")
  field(DTYP,  "asynInt32")
  field(OUT,   "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_SYNC_CLOCK")
}

################################################################
###
### Auto Trigger 
###

record(ao, "$(P)$(R)AutoTriggerX")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_X")
}

record(ai, "$(P)$(R)AutoTriggerX_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_X")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerY")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_Y")
}

record(ai, "$(P)$(R)AutoTriggerY_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_Y")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerW")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_W")
  field(DRVL, 1)
}

record(ai, "$(P)$(R)AutoTriggerW_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_W")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerH")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_H")
  field(DRVL, 1)
}

record(ai, "$(P)$(R)AutoTriggerH_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_H")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerThresh")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_THRESH")
  field(DRVH, 100)
  field(DRVL, 0)
}

record(ai, "$(P)$(R)AutoTriggerThresh_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_THRESH")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerArea")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_AREA")
  field(DRVH, 100)
  field(DRVL, 0)
}

record(ai, "$(P)$(R)AutoTriggerArea_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_AREA")
  field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)AutoTriggerInterval")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_INTERVAL")
  field(DRVL, 1)
}

record(ai, "$(P)$(R)AutoTriggerInterval_RBV")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_INTERVAL")
  field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)AutoTriggerMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_MODE")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)$(R)AutoTriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_AUTOTRIG_MODE")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

########## Disable Redundant areaDetector Fields #########

record(ao, "$(P)$(R)AcquireTime")
{
  field(PREC, "6")
}

record(ao, "$(P)$(R)AcquirePeriod")
{
  field(PREC, "6")
}

record(mbbo, "$(P)$(R)DataType")
{
  field(DISA, "1")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
  field(DISA, "1")
}

record(mbbo, "$(P)$(R)ColorMode")
{
  field(DISA, "1")
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinX")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)BinX_RBV")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)BinY")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)BinY_RBV")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)MinX")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)MinX_RBV")
{
  field(DISA, "1")
}

record(longout, "$(P)$(R)MinY")
{
  field(DISA, "1")
}

record(longin, "$(P)$(R)MinY_RBV")
{
  field(DISA, "1")
}

record(ao, "$(P)$(R)Gain")
{
  field(DISA, "1")
}

record(ai, "$(P)$(R)Gain_RBV")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseX")
{
  field(DISA, "1")
}

record(bo, "$(P)$(R)ReverseY")
{
  field(DISA, "1")
}

# Force a connection to establish

# Report back the connected state of the IOC
record(bi, "$(P)$(R)CONNECTED_RBV") 
{
  field(DESC, "Current connected status")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHANTOM_CONNECTED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Not Connected")
  field(ONAM, "Connected")
}

include "phantomFlash.template"


